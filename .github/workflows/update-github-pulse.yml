---
name: Update GitHub Pulse

'on':
  schedule:
    # Run daily at 6:00 AM UTC
    - cron: '0 6 * * *'
  workflow_dispatch:
  # Allow manual trigger via gh CLI

jobs:
  update-pulse:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Fetch GitHub contributions and update now.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get current date for the commit message and last_updated_at
          CURRENT_DATE=$(date +%Y-%m-%d)

          # Fetch last 5 public events for user jodosha
          echo "Fetching GitHub events..."
          EVENTS=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/users/jodosha/events/public?per_page=100")

          # Debug: Show raw response
          echo "DEBUG: Raw API response status and length:"
          echo "Events length: $(echo "$EVENTS" | wc -c)"
          echo "First 500 chars of response:"
          echo "$EVENTS" | head -c 500
          echo ""
          echo "DEBUG: Checking if response is valid JSON..."
          echo "$EVENTS" | node -e "
            try {
              JSON.parse(require('fs').readFileSync(0, 'utf8'));
              console.log('✓ Valid JSON');
            } catch(e) {
              console.log('✗ Invalid JSON:', e.message);
            }"

          # Filter for PULL_REQUEST and RELEASE events and get the last 5
          echo "Processing events..."

          # Debug: Check environment variable
          echo "DEBUG: EVENTS env var length: ${#EVENTS}"
          echo "DEBUG: First 200 chars of EVENTS env var:"
          echo "${EVENTS:0:200}"

          # Write Node.js script to file and execute
          cat > process_events.js << 'JSEOF'
          console.log('DEBUG: process.env.EVENTS length:',
                      (process.env.EVENTS || '').length);
          console.log('DEBUG: First 200 chars of process.env.EVENTS:');
          console.log((process.env.EVENTS || '').substring(0, 200));

          const events = JSON.parse(process.env.EVENTS || '[]');

          console.log('DEBUG: Total events fetched:', events.length);
          console.log('DEBUG: Event types found:');
          const eventTypeCounts = {};
          events.forEach(event => {
            const count = eventTypeCounts[event.type] || 0;
            eventTypeCounts[event.type] = count + 1;
          });
          console.log(JSON.stringify(eventTypeCounts, null, 2));

          console.log('DEBUG: First 3 events:');
          events.slice(0, 3).forEach((event, i) => {
            const repoName = event.repo?.name || 'unknown repo';
            console.log(`Event ${i+1}: ${event.type} in ${repoName}`);
          });

          const validEvents = events
            .filter(event => {
              const isValid = event.type === 'PullRequestEvent' ||
                              event.type === 'ReleaseEvent';

              if (isValid) {
                const repo = event.repo?.name;
                console.log(`DEBUG: Accepting ${event.type} in ${repo}`);
              }
              return isValid;
            })
            .slice(0, 5)
            .map(event => {
              let eventType, title, url;

              if (event.type === 'PullRequestEvent') {
                eventType = 'PULL_REQUEST';
                title = event.payload.pull_request.title;
                url = event.payload.pull_request.html_url;
              } else if (event.type === 'ReleaseEvent') {
                eventType = 'RELEASE';
                title = event.payload.release.name ||
                        event.payload.release.tag_name;
                url = event.payload.release.html_url;
              }

              return {
                event: eventType,
                title: title,
                repository: event.repo.name,
                url: url,
                created_at: event.created_at.split('T')[0]
              };
            });

          // Read current now.json
          const fs = require('fs');
          const nowData = JSON.parse(fs.readFileSync('data/now.json', 'utf8'));

          // Update pulse section and last_updated_at
          nowData.pulse = validEvents;
          nowData.last_updated_at = process.env.CURRENT_DATE;

          // Write updated data back to file
          fs.writeFileSync('data/now.json',
                           JSON.stringify(nowData, null, 2) + '\n');

          console.log('DEBUG: Final processed events:', validEvents.length);
          console.log('DEBUG: Events being saved:');
          validEvents.forEach((event, i) => {
            const title = event.title;
            const repo = event.repository;
            console.log(`  ${i+1}. ${event.event} - ${title} (${repo})`);
          });
          console.log('Updated pulse with', validEvents.length, 'events');
          JSEOF

          # Set environment variables and run the script
          export EVENTS="$EVENTS"
          export CURRENT_DATE="$CURRENT_DATE"
          node process_events.js

          # Clean up
          rm process_events.js

      - name: Commit and push changes
        run: |
          CURRENT_DATE=$(date +%Y-%m-%d)

          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Check if there are changes to commit
          if git diff --quiet data/now.json; then
            echo "No changes to commit"
            exit 0
          fi

          # Add and commit changes
          git add data/now.json
          git commit -m "Updated GitHub pulse ($CURRENT_DATE)"

          # Push changes
          git push
